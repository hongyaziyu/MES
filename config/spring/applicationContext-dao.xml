<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans-3.2.xsd 
		http://www.springframework.org/schema/mvc 
		http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd 
		http://www.springframework.org/schema/context 
		http://www.springframework.org/schema/context/spring-context-3.2.xsd 
		http://www.springframework.org/schema/aop 
		http://www.springframework.org/schema/aop/spring-aop-3.2.xsd 
		http://www.springframework.org/schema/tx 
		http://www.springframework.org/schema/tx/spring-tx-3.2.xsd ">

	<!-- 加载配置文件 -->
	<context:property-placeholder location="classpath:db.properties" />
	<!-- 数据库连接池 -->
    <!-- 改1jdbc1-->
	<bean id="dataSource1" class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close">
		<property name="driverClassName" value="${jdbc1.driver}" />
		<property name="url" value="${jdbc1.url}" />
		<property name="username" value="${jdbc1.username}" />
		<property name="password" value="${jdbc1.password}" />
		<property name="maxActive" value="30" />
		<property name="maxIdle" value="20" />
		<property name="minIdle" value="3"/>
		<property name="maxWait" value="25000"/>
		<property name="removeAbandoned" value="true" />
		<property name="removeAbandonedTimeout" value="25000"/>
		<property name="logAbandoned" value="true"/>
		<property name="validationQuery" value="SELECT 1"/>
		<property name="testWhileIdle" value="true"/>
		<property name="testOnBorrow" value="false"/>
		<property name="timeBetweenEvictionRunsMillis" value="30000"/>
		<property name="minEvictableIdleTimeMillis" value="1800000"/>
		<property name="numTestsPerEvictionRun" value="3"/>
	</bean>


<!-- 加1 -->
      <bean id="dataSource2" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
		     <property name="driverClassName" value="${jdbc2.driver}" />
		     <property name="url" value="${jdbc2.url}" />
		     <property name="username" value="${jdbc2.username}" />
		     <property name="password" value="${jdbc2.password}" />
		     <property name="maxActive" value="30" />
			 <property name="maxIdle" value="20" />
			 <property name="minIdle" value="3"/>
			 <property name="maxWait" value="25000"/>
			 <property name="removeAbandoned" value="true" />
			 <property name="removeAbandonedTimeout" value="25000"/>
			 <property name="logAbandoned" value="true"/>
			 <property name="validationQuery" value="SELECT 1"/>
			 <property name="testWhileIdle" value="true"/>
			 <property name="testOnBorrow" value="false"/>
			 <property name="timeBetweenEvictionRunsMillis" value="30000"/>
			 <property name="minEvictableIdleTimeMillis" value="1800000"/>
			 <property name="numTestsPerEvictionRun" value="3"/>
      </bean>


  <!-- 加2 多数据源选择的自定义类-->
   <bean id="dataSource" class="cn.ssm.util.DynamicDataSource">  
    <property name="targetDataSources">  
         <map key-type="java.lang.String">
            <!-- 指定lookupKey和与之对应的数据源 -->
             <entry key="dataSource1" value-ref="dataSource1"></entry>  
             <entry key="dataSource2" value-ref="dataSource2"></entry>   
         </map>  
     </property>  
     <!-- 这里可以指定默认的数据源 -->
     <property name="defaultTargetDataSource" ref="dataSource1" />  
   </bean>  





    <!-- spring与mybatis整合，不用写mybatis主配置文件 -->
	 <!-- 创建SqlsessionFactory会话工厂，用于生产工厂对象 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<!--数据源-->
		<property name="dataSource" ref="dataSource"/> 
		<!--mybatis配置文件-->
		<property name="configLocation" value="classpath:mybatis/SqlMapConfig.xml"/>
	</bean>
	
	
	<!-- MyBatis对数据库的映射是将 SQL 语句放在 mapper 文件中实现的，需要告诉 Mybatis
	到哪里去找映射文件, 如果映射文件较多，mappers 配置就显得庞大，可以通过 mapper 接口加载映射文件，
	指定接口的包名称，自动扫描包下的所有 mapper 接口进行加载-->


	<!--MapperScannerConfigurer：mapper的扫描器，将包下边的mapper接口自动创建代理对象，
	自动创建到spring容器中，bean的id是mapper的类名（首字母小写）-->
	
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<!--配置扫描包的路径 如果要扫描多个包，中间使用半角逗号分隔
		要求mapper.xml和mapper.java同名且在同一个目录  -->
		
		<property name="basePackage" value="cn.ssm.mapper"/>
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
		
	</bean>
	
	
	
	
</beans>